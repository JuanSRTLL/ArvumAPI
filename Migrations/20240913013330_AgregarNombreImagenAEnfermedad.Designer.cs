// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoAPI.Data;

#nullable disable

namespace ProyectoAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240913013330_AgregarNombreImagenAEnfermedad")]
    partial class AgregarNombreImagenAEnfermedad
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProyectoAPI.Models.Cultivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Cultivos");
                });

            modelBuilder.Entity("ProyectoAPI.Models.Datos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CultivoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("HumedadAire")
                        .HasColumnType("float");

                    b.Property<float>("HumedadSuelo")
                        .HasColumnType("float");

                    b.Property<float>("IndiceCalorC")
                        .HasColumnType("float");

                    b.Property<float>("IndiceCalorF")
                        .HasColumnType("float");

                    b.Property<float>("NivelDeAgua")
                        .HasColumnType("float");

                    b.Property<float>("Temperatura")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CultivoId");

                    b.ToTable("Datos");
                });

            modelBuilder.Entity("ProyectoAPI.Models.Enfermedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CultivoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NombreImagen")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CultivoId");

                    b.ToTable("Enfermedades");
                });

            modelBuilder.Entity("ProyectoAPI.Models.EnfermedadExterna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Confianza")
                        .HasColumnType("float");

                    b.Property<DateTime>("FechaDeteccion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EnfermedadesExternas");
                });

            modelBuilder.Entity("ProyectoAPI.Models.Esp32Cam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.ToTable("Esp32Cams");
                });

            modelBuilder.Entity("ProyectoAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ProyectoAPI.Models.Datos", b =>
                {
                    b.HasOne("ProyectoAPI.Models.Cultivo", "Cultivo")
                        .WithMany("Datos")
                        .HasForeignKey("CultivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");
                });

            modelBuilder.Entity("ProyectoAPI.Models.Enfermedad", b =>
                {
                    b.HasOne("ProyectoAPI.Models.Cultivo", "Cultivo")
                        .WithMany("Enfermedades")
                        .HasForeignKey("CultivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");
                });

            modelBuilder.Entity("ProyectoAPI.Models.Cultivo", b =>
                {
                    b.Navigation("Datos");

                    b.Navigation("Enfermedades");
                });
#pragma warning restore 612, 618
        }
    }
}
